import torch
F = torch.nn.functional
import numpy as np
import ivy
from ivy.functional.frontends.torch.nn.functional.vision_functions import grid_sample
from copy import deepcopy

import jax
jax.config.update('jax_enable_x64', True)


if __name__ == "__main__":
    # ivy.set_backend('paddle')
    # 2D
    # n, h, w, c = 8, 12, 7, 3
    # to_h, to_w = 7, 11
    # image = np.random.randn(n, c, h, w)
    # grid = np.random.randint(0, 4, size=(n, to_h, to_w, 2)) * 1.0
    # grid = np.zeros((n, to_h, to_w, 2))
    # grid = np.random.randn(n, to_h, to_w, 2)

    # 3D
    # n, h, w, d, c = 24, 12, 5, 7, 4
    # to_h, to_w, to_d = 6, 7, 8
    # image = np.random.randn(n, c, d, h, w)
    # grid = np.random.randn(n, to_d, to_h, to_w, 3)
    # grid = np.zeros((n, to_d, to_h, to_w, 3))
    # grid = np.random.randint(0, 4, size=(n, to_d, to_h, to_w, 3)) * 1.0

    # Custom
    image = np.array([[[[[-5.0000000e-01, -5.0000000e-01, -5.0000000e-01,
                       -5.0000000e-01, -5.0000000e-01, -5.0000000e-01],
                      [-5.0000000e-01, -5.0000000e-01, -5.0000000e-01,
                       -5.0000000e-01, -5.0000000e-01, -5.0000000e-01],
                      [-5.0000000e-01, -5.0000000e-01, -5.0000000e-01,
                       -5.0000000e-01, -5.0000000e-01, -5.0000000e-01],
                      [-5.0000000e-01, -5.0000000e-01, -5.0000000e-01,
                       -5.0000000e-01, -5.0000000e-01, -5.0000000e-01],
                      [-5.0000000e-01, -5.0000000e-01, -5.0000000e-01,
                       -5.0000000e-01, -5.0000000e-01, -5.0000000e-01]],

                     [[-5.0000000e-01, -5.0000000e-01, -5.0000000e-01,
                       -5.0000000e-01, -5.0000000e-01, -3.3333334e-01],
                      [-3.3333334e-01, -3.3333334e-01, -3.3333334e-01,
                       -3.3333334e-01, -3.3333334e-01, -3.3333334e-01],
                      [-3.3333334e-01, -3.3333334e-01, -3.3333334e-01,
                       -5.0000000e-01, -5.0000000e-01, -5.0000000e-01],
                      [-6.1035156e-05, -6.1035156e-05, -6.1035156e-05,
                       -6.1035156e-05, -6.1035156e-05, -6.1035156e-05],
                      [-6.1035156e-05, -6.1035156e-05, -6.1035156e-05,                       -6.1035156e-05, -6.1035156e-05, -6.1035156e-05]],

                     [[-6.1035156e-05, -5.0000000e-01, -5.0000000e-01,
                       -5.0000000e-01, -9.9999997e-06, -9.9999997e-06],
                      [-9.9999997e-06, -9.9999997e-06, -9.9999997e-06,
                       -9.9999997e-06, -9.9999997e-06, -9.9999997e-06],
                      [-9.9999997e-06, -9.9999997e-06, -9.9999997e-06,
                       -5.0000000e-01, -5.0000000e-01, -1.7874117e-07],
                      [-1.7874117e-07, -1.7874117e-07, -1.7874117e-07,
                       -1.7874117e-07, -1.7874117e-07, -1.7874117e-07],
                      [-1.7874117e-07, -1.7874117e-07, -1.7874117e-07,
                       -1.7874117e-07, -5.0000000e-01, -5.0000000e-01]],

                     [[-5.0000000e-01, -5.0000000e-01, -5.0000000e-01,
                       -5.0000000e-01, -5.0000000e-01, -5.0000000e-01],
                      [-5.0000000e-01, -5.0000000e-01, -5.0000000e-01,
                       -5.0000000e-01, -5.0000000e-01, -5.0000000e-01],
                      [-5.0000000e-01, -5.0000000e-01, -5.0000000e-01,
                       -5.0000000e-01, -5.0000000e-01, -5.0000000e-01],
                      [-5.0000000e-01, -5.0000000e-01, -5.0000000e-01,
                       -5.0000000e-01, -5.0000000e-01, -5.0000000e-01],
                      [-5.0000000e-01, -5.0000000e-01, -5.0000000e-01,
                       -5.0000000e-01, -5.0000000e-01, -5.0000000e-01]],

                     [[-5.0000000e-01, -5.0000000e-01, -5.0000000e-01,
                       -9.0909088e-01, -9.0909088e-01, -9.0909088e-01],
                      [-9.0909088e-01, -9.0909088e-01, -5.0000000e-01,
                       -5.0000000e-01, -5.0000000e-01, -9.0909088e-01],
                      [-9.0909088e-01, -9.0909088e-01, -9.0909088e-01,
                       -9.0909088e-01, -9.0909088e-01, -9.0909088e-01],
                      [-9.0909088e-01, -9.0909088e-01, -9.0909088e-01,
                       -9.0909088e-01, -9.0909088e-01, -9.0909088e-01],
                      [-9.0909088e-01, -9.0909088e-01, -9.0909088e-01,
                       -9.0909088e-01, -5.0000000e-01, -5.0000000e-01]],

                     [[-5.0000000e-01, -5.0000000e-01, -5.0000000e-01,
                       -5.0000000e-01, -5.0000000e-01, -5.0000000e-01],
                      [-5.0000000e-01, -5.0000000e-01, -5.0000000e-01,
                       -5.0000000e-01, -5.0000000e-01, -5.0000000e-01],
                      [-5.0000000e-01, -5.0000000e-01, -5.0000000e-01,
                       -5.0000000e-01, -5.0000000e-01, -2.9802322e-08],
                      [-2.9802322e-08, -2.9802322e-08, -2.9802322e-08,
                       -2.9802322e-08, -2.9802322e-08, -2.9802322e-08],
                      [-2.9802322e-08, -2.9802322e-08, -2.9802322e-08,
                       -2.9802322e-08,  5.0000000e-01,  5.0000000e-01]],

                     [[ 5.0000000e-01,  5.0000000e-01,  5.0000000e-01,
                        5.0000000e-01,  5.0000000e-01,  5.0000000e-01],
                      [ 5.0000000e-01,  5.0000000e-01,  5.0000000e-01,
                        5.0000000e-01,  5.0000000e-01,  5.0000000e-01],
                      [ 5.0000000e-01,  5.0000000e-01,  5.0000000e-01,
                        5.0000000e-01,  5.0000000e-01,  5.0000000e-01],
                      [ 5.0000000e-01,  5.0000000e-01,  5.0000000e-01,
                        5.0000000e-01,  5.0000000e-01,  5.0000000e-01],
                      [ 5.0000000e-01,  5.0000000e-01,  5.0000000e-01,
                        5.0000000e-01,  5.0000000e-01,  5.0000000e-01]],

                     [[ 5.0000000e-01,  5.0000000e-01,  5.0000000e-01,
                        3.3333334e-01,  3.3333334e-01,  3.3333334e-01],
                      [ 3.3333334e-01,  3.3333334e-01,  3.3333334e-01,
                        3.3333334e-01,  3.3333334e-01,  3.3333334e-01],
                      [ 3.3333334e-01,  3.3333334e-01,  3.3333334e-01,
                        5.0000000e-01,  5.0000000e-01,  5.0000000e-01],
                      [ 5.0000000e-01,  6.1035156e-05,  6.1035156e-05,
                        6.1035156e-05,  6.1035156e-05,  6.1035156e-05],
                      [ 6.1035156e-05,  6.1035156e-05,  6.1035156e-05,
                        6.1035156e-05,  6.1035156e-05,  6.1035156e-05]],

                     [[ 6.1035156e-05,  5.0000000e-01,  5.0000000e-01,
                        5.0000000e-01,  9.9999997e-06,  9.9999997e-06],
                      [ 9.9999997e-06,  9.9999997e-06,  9.9999997e-06,
                        9.9999997e-06,  9.9999997e-06,  9.9999997e-06],
                      [ 9.9999997e-06,  9.9999997e-06,  9.9999997e-06,
                        9.9999997e-06,  9.9999997e-06,  9.9999997e-06],
                      [ 9.9999997e-06,  5.0000000e-01,  1.7874117e-07,
                        1.7874117e-07,  1.7874117e-07,  1.7874117e-07],
                      [ 1.7874117e-07,  1.7874117e-07,  1.7874117e-07,
                        1.7874117e-07,  1.7874117e-07,  5.0000000e-01]],

                     [[ 5.0000000e-01,  5.0000000e-01,  5.0000000e-01,
                        5.0000000e-01,  5.0000000e-01,  5.0000000e-01],
                      [ 5.0000000e-01,  5.0000000e-01,  5.0000000e-01,
                        5.0000000e-01,  5.0000000e-01,  5.0000000e-01],
                      [ 5.0000000e-01,  5.0000000e-01,  5.0000000e-01,
                        5.0000000e-01,  5.0000000e-01,  5.0000000e-01],
                      [ 5.0000000e-01,  5.0000000e-01,  5.0000000e-01,
                        5.0000000e-01,  5.0000000e-01,  5.0000000e-01],
                      [ 5.0000000e-01,  5.0000000e-01,  5.0000000e-01,
                        5.0000000e-01,  5.0000000e-01,  5.0000000e-01]]]]])
    grid = np.array([[[[[ 2.9802322e-08,  2.9802322e-08,  2.9802322e-08],
                      [ 2.9802322e-08,  2.9802322e-08,  2.9802322e-08],
                      [ 2.9802322e-08,  2.9802322e-08,  2.9802322e-08]],

                     [[ 2.9802322e-08,  2.9802322e-08,  2.9802322e-08],
                      [ 2.9802322e-08,  2.9802322e-08,  2.9802322e-08],
                      [ 5.0000000e-01,  5.0000000e-01,  5.0000000e-01]]],


                    [[[ 5.0000000e-01,  5.0000000e-01,  5.0000000e-01],
                      [ 5.0000000e-01,  5.0000000e-01,  5.0000000e-01],
                      [ 5.0000000e-01,  5.0000000e-01,  5.0000000e-01]],

                     [[ 5.0000000e-01,  5.0000000e-01,  5.0000000e-01],
                     [ 9.0909088e-01,  9.0909088e-01,  9.0909088e-01],
                      [ 9.0909088e-01,  9.0909088e-01,  9.0909088e-01]]],


                    [[[ 9.0909088e-01,  9.0909088e-01,  9.0909088e-01],
                      [ 9.0909088e-01,  9.0909088e-01,  9.0909088e-01],
                      [ 9.0909088e-01,  5.0000000e-01,  5.0000000e-01]],

                     [[ 9.0909088e-01,  9.0909088e-01,  9.0909088e-01],
                      [ 9.0909088e-01,  9.0909088e-01,  9.0909088e-01],
                      [ 9.0909088e-01,  9.0909088e-01,  9.0909088e-01]]],


                    [[[ 9.0909088e-01,  9.0909088e-01,  9.0909088e-01],
                      [ 9.0909088e-01,  9.0909088e-01,  9.0909088e-01],
                      [-5.0000000e-01, -5.0000000e-01, -5.0000000e-01]],

                     [[-5.0000000e-01, -5.0000000e-01, -5.0000000e-01],
                      [-5.0000000e-01, -5.0000000e-01, -5.0000000e-01],
                      [-5.0000000e-01, -5.0000000e-01, -5.0000000e-01]]],


                    [[[-3.3333334e-01, -3.3333334e-01, -3.3333334e-01],
                      [-3.3333334e-01, -3.3333334e-01, -3.3333334e-01],
                      [-3.3333334e-01, -5.0000000e-01, -5.0000000e-01]],

                     [[-6.1035156e-05, -6.1035156e-05, -6.1035156e-05],
                      [-6.1035156e-05, -6.1035156e-05, -9.9999997e-06],
                      [-9.9999997e-06, -9.9999997e-06, -9.9999997e-06]]]]])

    # grid_not_align = deepcopy(grid)
    # grid_not_align[:, :, :, 0] = ((grid_not_align[:, :, :, 0] + 1) * image.shape[3] - 1) / 2
    # grid_not_align[:, :, :, 1] = ((grid_not_align[:, :, :, 1] + 1) * image.shape[2] - 1) / 2

    # print(grid_not_align + 4)

    # ceil_mask = (grid_not_align % 1 == 0.5)
    # print("\ncoordinate(w, h) align false: ")
    # for i in range(grid.shape[1]):
    #     display = ""
    #     for j in range(grid.shape[2]):
    #         display += f"[{grid_not_align[0, i, j, 0]} {grid_not_align[0, i, j, 1]}] [{ceil_mask[0, i, j, 0]} {ceil_mask[0, i, j, 1]}] "
    #     print(display)
    #
    # print(f"Output: {image[0, :, 2, 4], ceil_mask.shape} ")


    mode = 'nearest'
    padding_mode = 'zeros'
    align_corner = False


    output = F.grid_sample(deepcopy(torch.Tensor(image)), deepcopy(torch.Tensor(grid)), mode=mode, align_corners=align_corner, padding_mode=padding_mode)
    print(f"\nOutput({mode}, align_corner={align_corner}): {output.shape} {padding_mode}")
    print(output)

    image_i, grid_i = ivy.array(image), ivy.array(grid)
    output_ivy = grid_sample(deepcopy(image_i), deepcopy(grid_i), mode=mode, align_corners=align_corner, padding_mode=padding_mode)
    print(f"ivy Output({mode}, align_corner={align_corner} (shape:{output_ivy.shape})")
    print(output_ivy)
    print(np.allclose(output, output_ivy.ivy_array.to_numpy(), atol=1e-3))



# import ivy.functional.frontends.torch as torch_frontend
# import torch
# import numpy as np
#
# if __name__ == '__main__':
#     inp = torch.randn((3, 4, 4, 4))
#     grid = torch.randint(0, 4, size=(3, 4, 4, 2), dtype=torch.float32)
#
#     mode = 'bilinear'
#     padding = 'reflection'
#
#     result_orig = torch.nn.functional.grid_sample(inp.clone(), grid.clone(), mode=mode, padding_mode=padding,
#                                                   align_corners=False)
#     print('native fn result shape', result_orig.shape)
#
#     result_new = torch_frontend.nn.functional.grid_sample(inp.clone(), grid.clone(), mode=mode, padding_mode=padding,
#                                                           align_corners=False)
#     print('frontend fn result shape', result_new.shape)
#
#     print(np.allclose(result_orig, result_new.ivy_array.to_numpy(), atol=1e-4))

# import ivy.functional.frontends.torch as torch_frontend
# import ivy
#
# if __name__ == '__main__':
#     # ivy.set_backend('numpy')
#
#     inp = ivy.random_uniform(shape=(2, 2, 1, 6))
#     grid = ivy.random_uniform(shape=(2, 2, 1, 6))
#
#     mode = 'nearest'
#     padding = 'border'
#     align_corners = True
#     print(inp)
#     result_new = torch_frontend.nn.functional.grid_sample(inp,
#                                                           grid, mode=mode,
#                                                           padding_mode=padding, align_corners=align_corners)
#     print(inp) # different from before

