============================= test session starts ==============================
platform linux -- Python 3.8.10, pytest-7.1.2, pluggy-1.0.0
rootdir: /workspaces/ivy
plugins: typeguard-2.13.3, hypothesis-6.48.2
collected 6 items / 5 deselected / 1 selected

ivy_tests/test_ivy/test_frontends/test_numpy/test_mathematical_functions/test_miscellaneous.py F [100%]

=================================== FAILURES ===================================
_____ test_numpy_clip[cpu-ivy.functional.backends.numpy-True-False-numpy] ______

get_command_line_flags = {'as_variable': None, 'container': None, 'instance_method': None, 'native_array': None, ...}
device = 'cpu'
f = <module 'ivy.functional.backends.numpy' from '/workspaces/ivy/ivy/functional/backends/numpy/__init__.py'>
fw = 'numpy', args = (), kwargs = {}

    @given(data=st.data())
>   @settings(max_examples=1)

ivy_tests/test_ivy/helpers.py:3109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
ivy_tests/test_ivy/helpers.py:3136: in new_fn
    return test_fn(*args, **kwargs)
ivy_tests/test_ivy/test_frontends/test_numpy/test_mathematical_functions/test_miscellaneous.py:13: in test_numpy_clip
    @given(
ivy_tests/test_ivy/test_frontends/test_numpy/test_mathematical_functions/test_miscellaneous.py:44: in test_numpy_clip
    np_frontend_helpers.test_frontend_function(
ivy_tests/test_ivy/test_frontends/test_numpy/helpers.py:47: in test_frontend_function
    _test_frontend_function_ignoring_unitialized(*args, **kwargs)
ivy_tests/test_ivy/test_frontends/test_numpy/helpers.py:26: in _test_frontend_function_ignoring_unitialized
    values = helpers.test_frontend_function(*args, **kwargs)
ivy_tests/test_ivy/helpers.py:1879: in test_frontend_function
    value_test(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def value_test(
        *,
        ret_np_flat,
        ret_np_from_gt_flat,
        rtol=None,
        atol=1e-6,
        ground_truth_backend="TensorFlow",
    ):
        """Performs a value test for matching the arrays in ret_np_flat and
        ret_from_np_flat.
    
        Parameters
        ----------
        ret_np_flat
            A list (flattened) containing Numpy arrays. Return from the
            framework to test.
        ret_from_np_flat
            A list (flattened) containing Numpy arrays. Return from the ground
            truth framework.
        rtol
            Relative Tolerance Value.
        atol
            Absolute Tolerance Value.
        ground_truth_backend
            Ground Truth Backend Framework.
    
        Returns
        -------
        None if the value test passes, else marks the test as failed.
        """
        if type(ret_np_flat) != list:
            ret_np_flat = [ret_np_flat]
        if type(ret_np_from_gt_flat) != list:
            ret_np_from_gt_flat = [ret_np_from_gt_flat]
>       assert len(ret_np_flat) == len(ret_np_from_gt_flat), (
            "len(ret_np_flat) != len(ret_np_from_gt_flat):\n\n"
            "ret_np_flat:\n\n{}\n\nret_np_from_gt_flat:\n\n{}".format(
                ret_np_flat, ret_np_from_gt_flat
            )
        )
E       AssertionError: len(ret_np_flat) != len(ret_np_from_gt_flat):
E       
E       ret_np_flat:
E       
E       []
E       
E       ret_np_from_gt_flat:
E       
E       [array([-1.1875], dtype=float16)]

ivy_tests/test_ivy/helpers.py:699: AssertionError
----------------------------- Captured stdout call -----------------------------
ret 0.0
args_frontend (array(0., dtype=float32), 0.0, 0.0)
kwargs_frontend {'out': None, 'casting': 'same_kind', 'order': 'k', 'dtype': dtype('float16'), 'subok': True, 'where': False}
frontend_ret gt 3136.0 <class 'numpy.float16'>
frontend_ret gt after fix [3136.] <class 'numpy.ndarray'>
frontend_ret gt post tuple (array([3136.], dtype=float16),)
frontend_ret_idxs [[0]]
frontend_ret_flat [array([3136.], dtype=float16)]
ret in flatten [[0.]]
ret_flat [[0.]]
ret_np_flat []
ret ivy.array([-0.909])
args_frontend (array([-0.90909091]), [-0.9090909090909091], [-0.9090909090909091])
kwargs_frontend {'out': None, 'casting': 'same_kind', 'order': 'k', 'dtype': dtype('float16'), 'subok': True, 'where': array([False])}
frontend_ret gt [-0.909] <class 'numpy.ndarray'>
frontend_ret gt after fix [-0.909] <class 'numpy.ndarray'>
frontend_ret gt post tuple (array([-0.909], dtype=float16),)
frontend_ret_idxs [[0]]
frontend_ret_flat [array([-0.909], dtype=float16)]
ret in flatten [[[-0.909]]]
ret_flat [[[-0.909]]]
ret_np_flat []
ret 0.0
args_frontend (array(0., dtype=float32), 0.0, 0.0)
kwargs_frontend {'out': None, 'casting': 'same_kind', 'order': 'k', 'dtype': dtype('float16'), 'subok': True, 'where': False}
frontend_ret gt 1.0 <class 'numpy.float16'>
frontend_ret gt after fix [1.] <class 'numpy.ndarray'>
frontend_ret gt post tuple (array([1.], dtype=float16),)
frontend_ret_idxs [[0]]
frontend_ret_flat [array([1.], dtype=float16)]
ret in flatten [[0.]]
ret_flat [[0.]]
ret_np_flat []
ret 0.0
args_frontend (array(0., dtype=float32), 0.0, 0.0)
kwargs_frontend {'out': None, 'casting': 'same_kind', 'order': 'k', 'dtype': dtype('float16'), 'subok': True, 'where': False}
frontend_ret gt -198.0 <class 'numpy.float16'>
frontend_ret gt after fix [-198.] <class 'numpy.ndarray'>
frontend_ret gt post tuple (array([-198.], dtype=float16),)
frontend_ret_idxs [[0]]
frontend_ret_flat [array([-198.], dtype=float16)]
ret in flatten [[0.]]
ret_flat [[0.]]
ret_np_flat []
ret 0.0
args_frontend (array(0., dtype=float32), 0.0, 0.0)
kwargs_frontend {'out': None, 'casting': 'same_kind', 'order': 'k', 'dtype': dtype('float16'), 'subok': True, 'where': False}
frontend_ret gt -0.00010586 <class 'numpy.float16'>
frontend_ret gt after fix [-0.00010586] <class 'numpy.ndarray'>
frontend_ret gt post tuple (array([-0.00010586], dtype=float16),)
frontend_ret_idxs [[0]]
frontend_ret_flat [array([-0.00010586], dtype=float16)]
ret in flatten [[0.]]
ret_flat [[0.]]
ret_np_flat []
ret ivy.array([-0.0867])
args_frontend (array([-0.08664562]), [-0.08664561800393182], [-1.6342664862384688e+308])
kwargs_frontend {'out': None, 'casting': 'same_kind', 'order': 'k', 'dtype': dtype('float16'), 'subok': True, 'where': array([False])}
frontend_ret gt [-0.0867] <class 'numpy.ndarray'>
frontend_ret gt after fix [-0.0867] <class 'numpy.ndarray'>
frontend_ret gt post tuple (array([-0.0867], dtype=float16),)
frontend_ret_idxs [[0]]
frontend_ret_flat [array([-0.0867], dtype=float16)]
ret in flatten [[[-0.0867]]]
ret_flat [[[-0.0867]]]
ret_np_flat []
ret 0.0
args_frontend (array(0., dtype=float32), 0.0, 0.0)
kwargs_frontend {'out': None, 'casting': 'same_kind', 'order': 'k', 'dtype': dtype('float16'), 'subok': True, 'where': False}
frontend_ret gt 1.0 <class 'numpy.float16'>
frontend_ret gt after fix [1.] <class 'numpy.ndarray'>
frontend_ret gt post tuple (array([1.], dtype=float16),)
frontend_ret_idxs [[0]]
frontend_ret_flat [array([1.], dtype=float16)]
ret in flatten [[0.]]
ret_flat [[0.]]
ret_np_flat []
ret 0.0
args_frontend (array(0., dtype=float32), 0.0, 0.0)
kwargs_frontend {'out': None, 'casting': 'same_kind', 'order': 'k', 'dtype': dtype('float16'), 'subok': True, 'where': False}
frontend_ret gt -1.1875 <class 'numpy.float16'>
frontend_ret gt after fix [-1.1875] <class 'numpy.ndarray'>
frontend_ret gt post tuple (array([-1.1875], dtype=float16),)
frontend_ret_idxs [[0]]
frontend_ret_flat [array([-1.1875], dtype=float16)]
ret in flatten [[0.]]
ret_flat [[0.]]
ret_np_flat []
---------------------------------- Hypothesis ----------------------------------
Falsifying example: test_numpy_clip(
    x_min_n_max=(['float32', 'float32', 'float32'], [0.0, 0.0, 0.0]),
    dtype='float16',
    where=False,
    as_variable=[False],
    with_out=False,
    num_positional_args=3,
    native_array=[False],
    fw='numpy',
)
Falsifying example: new_fn(
    data=data(...),
    get_command_line_flags={'as_variable': None,
     'native_array': None,
     'with_out': None,
     'container': None,
     'instance_method': None,
     'test_gradients': None},
    device='cpu',
    f=<module 'ivy.functional.backends.numpy' from '/workspaces/ivy/ivy/functional/backends/numpy/__init__.py'>,
    fw='numpy',
)
Falsifying example: test_numpy_clip(
    x_min_n_max=(['float32', 'float32', 'float32'], [0.0, 0.0, 0.0]),
    dtype='float16',
    where=False,
    as_variable=[False],
    with_out=False,
    num_positional_args=3,
    native_array=[False],
    fw='numpy',
)
=============================== warnings summary ===============================
../../usr/local/lib/python3.8/dist-packages/flatbuffers/compat.py:19
  /usr/local/lib/python3.8/dist-packages/flatbuffers/compat.py:19: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
    import imp

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED ivy_tests/test_ivy/test_frontends/test_numpy/test_mathematical_functions/test_miscellaneous.py::test_numpy_clip[cpu-ivy.functional.backends.numpy-True-False-numpy]
================== 1 failed, 5 deselected, 1 warning in 3.29s ==================
