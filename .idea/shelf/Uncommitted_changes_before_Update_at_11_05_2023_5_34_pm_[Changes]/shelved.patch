Index: ivy_tests/test_ivy/test_frontends/test_jax/test_jax_lax_linalg.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># global\r\nimport sys\r\nimport numpy as np\r\nfrom hypothesis import strategies as st\r\n\r\n# local\r\nimport ivy\r\nimport ivy_tests.test_ivy.helpers as helpers\r\nfrom ivy_tests.test_ivy.helpers import assert_all_close\r\nfrom ivy_tests.test_ivy.helpers import handle_frontend_test\r\n\r\n\r\n# svd\r\n@handle_frontend_test(\r\n    fn_tree=\"jax.lax.linalg.svd\",\r\n    dtype_and_x=helpers.dtype_and_values(\r\n        available_dtypes=helpers.get_dtypes(\"float\"),\r\n        min_value=0,\r\n        max_value=10,\r\n        shape=helpers.ints(min_value=2, max_value=5).map(lambda x: tuple([x, x])),\r\n    ).filter(\r\n        lambda x: \"float16\" not in x[0]\r\n        and \"bfloat16\" not in x[0]\r\n        and np.linalg.cond(x[1][0]) < 1 / sys.float_info.epsilon\r\n        and np.linalg.det(np.asarray(x[1][0])) != 0\r\n    ),\r\n    full_matrices=st.booleans(),\r\n    compute_uv=st.booleans(),\r\n    test_with_out=st.just(False),\r\n)\r\ndef test_jax_lax_svd(\r\n    *,\r\n    dtype_and_x,\r\n    full_matrices,\r\n    compute_uv,\r\n    on_device,\r\n    fn_tree,\r\n    frontend,\r\n    test_flags,\r\n):\r\n    dtype, x = dtype_and_x\r\n    x = np.asarray(x[0], dtype=dtype[0])\r\n    # make symmetric positive-definite beforehand\r\n    x = np.matmul(x.T, x) + np.identity(x.shape[0]) * 1e-3\r\n\r\n    ret, frontend_ret = helpers.test_frontend_function(\r\n        input_dtypes=dtype,\r\n        frontend=frontend,\r\n        test_flags=test_flags,\r\n        fn_tree=fn_tree,\r\n        on_device=on_device,\r\n        test_values=False,\r\n        x=x,\r\n        full_matrices=full_matrices,\r\n        compute_uv=compute_uv,\r\n    )\r\n\r\n    if compute_uv:\r\n        ret = [ivy.to_numpy(x) for x in ret]\r\n        frontend_ret = [np.asarray(x) for x in frontend_ret]\r\n\r\n        u, s, vh = ret\r\n        frontend_u, frontend_s, frontend_vh = frontend_ret\r\n\r\n        assert_all_close(\r\n            ret_np=u @ np.diag(s) @ vh,\r\n            ret_from_gt_np=frontend_u @ np.diag(frontend_s) @ frontend_vh,\r\n            rtol=1e-2,\r\n            atol=1e-2,\r\n            ground_truth_backend=frontend,\r\n        )\r\n    else:\r\n        assert_all_close(\r\n            ret_np=ivy.to_numpy(ret),\r\n            ret_from_gt_np=np.asarray(frontend_ret[0]),\r\n            rtol=1e-2,\r\n            atol=1e-2,\r\n            ground_truth_backend=frontend,\r\n        )\r\n\r\n\r\n# cholesky\r\n@handle_frontend_test(\r\n    fn_tree=\"jax.lax.linalg.cholesky\",\r\n    dtype_and_x=helpers.dtype_and_values(\r\n        available_dtypes=helpers.get_dtypes(\"float\"),\r\n        min_value=0,\r\n        max_value=10,\r\n        shape=helpers.ints(min_value=2, max_value=5).map(lambda x: tuple([x, x])),\r\n    ).filter(\r\n        lambda x: \"float16\" not in x[0]\r\n        and \"bfloat16\" not in x[0]\r\n        and np.linalg.cond(x[1][0]) < 1 / sys.float_info.epsilon\r\n        and np.linalg.det(np.asarray(x[1][0])) != 0\r\n    ),\r\n    symmetrize_input=st.booleans(),\r\n    test_with_out=st.just(False),\r\n)\r\ndef test_jax_lax_cholesky(\r\n    *,\r\n    dtype_and_x,\r\n    symmetrize_input,\r\n    on_device,\r\n    fn_tree,\r\n    frontend,\r\n    test_flags,\r\n):\r\n    dtype, x = dtype_and_x\r\n    x = np.asarray(x[0], dtype=dtype[0])\r\n    # make symmetric positive-definite beforehand\r\n    x = np.matmul(x.T, x) + np.identity(x.shape[0]) * 1e-3\r\n    helpers.test_frontend_function(\r\n        input_dtypes=dtype,\r\n        frontend=frontend,\r\n        test_flags=test_flags,\r\n        fn_tree=fn_tree,\r\n        on_device=on_device,\r\n        rtol=1e-02,\r\n        x=x,\r\n        symmetrize_input=symmetrize_input,\r\n    )\r\n\r\n\r\n# eigh\r\n@handle_frontend_test(\r\n    fn_tree=\"jax.lax.linalg.eigh\",\r\n    dtype_and_x=helpers.dtype_and_values(\r\n        available_dtypes=helpers.get_dtypes(\"float\"),\r\n        min_value=0,\r\n        max_value=10,\r\n        shape=helpers.ints(min_value=2, max_value=5).map(lambda x: tuple([x, x])),\r\n    ).filter(\r\n        lambda x: \"float16\" not in x[0]\r\n        and \"bfloat16\" not in x[0]\r\n        and np.linalg.cond(x[1][0]) < 1 / sys.float_info.epsilon\r\n        and np.linalg.det(np.asarray(x[1][0])) != 0\r\n    ),\r\n    lower=st.booleans(),\r\n    symmetrize_input=st.booleans(),\r\n    test_with_out=st.just(False),\r\n)\r\ndef test_jax_lax_eigh(\r\n    *,\r\n    dtype_and_x,\r\n    lower,\r\n    symmetrize_input,\r\n    on_device,\r\n    fn_tree,\r\n    frontend,\r\n    test_flags,\r\n):\r\n    dtype, x = dtype_and_x\r\n    x = np.array(x[0], dtype=dtype[0])\r\n    # make symmetric positive-definite beforehand\r\n    x = np.matmul(x.T, x) + np.identity(x.shape[0]) * 1e-3\r\n\r\n    ret, frontend_ret = helpers.test_frontend_function(\r\n        input_dtypes=dtype,\r\n        frontend=frontend,\r\n        test_flags=test_flags,\r\n        fn_tree=fn_tree,\r\n        on_device=on_device,\r\n        test_values=False,\r\n        x=x,\r\n        lower=lower,\r\n        symmetrize_input=symmetrize_input,\r\n    )\r\n    ret = [ivy.to_numpy(x) for x in ret]\r\n    frontend_ret = [np.asarray(x) for x in frontend_ret]\r\n\r\n    L, Q = ret\r\n    frontend_Q, frontend_L = frontend_ret\r\n\r\n    assert_all_close(\r\n        ret_np=Q @ np.diag(L) @ Q.T,\r\n        ret_from_gt_np=frontend_Q @ np.diag(frontend_L) @ frontend_Q.T,\r\n        atol=1e-2,\r\n    )\r\n\r\n#qdwh\r\n@handle_frontend_test(\r\n    fn_tree=\"jax.lax.linalg.qdwh\",\r\n    dtype_and_x=helpers.dtype_and_values(\r\n        available_dtypes=helpers.get_dtypes(\"float\"),\r\n        min_value=0,\r\n        max_value=10,\r\n        shape=helpers.ints(min_value=2, max_value=5).map(lambda x: tuple([x, x])),\r\n    ).filter(\r\n        lambda x: \"float16\" not in x[0]\r\n        and \"bfloat16\" not in x[0]\r\n        and np.linalg.cond(x[1][0]) < 1 / sys.float_info.epsilon\r\n        and np.linalg.det(np.asarray(x[1][0])) != 0\r\n    ),\r\n    lower=st.booleans(),\r\n    symmetrize_input=st.booleans(),\r\n    test_with_out=st.just(False),\r\n)\r\ndef test_jax_lax_qdwh(\r\n    *,\r\n    dtype_and_x,\r\n    lower,\r\n    symmetrize_input,\r\n    on_device,\r\n    fn_tree,\r\n    frontend,\r\n    test_flags,\r\n):\r\n    dtype, x = dtype_and_x\r\n    x = np.array(x[0], dtype=dtype[0])\r\n    # make symmetric positive-definite beforehand\r\n    x = np.matmul(x.T, x) + np.identity(x.shape[0]) * 1e-3\r\n\r\n    ret, frontend_ret = helpers.test_frontend_function(\r\n        input_dtypes=dtype,\r\n        frontend=frontend,\r\n        test_flags=test_flags,\r\n        fn_tree=fn_tree,\r\n        on_device=on_device,\r\n        test_values=False,\r\n        x=x,\r\n        lower=lower,\r\n        symmetrize_input=symmetrize_input,\r\n    )\r\n    ret = [ivy.to_numpy(x) for x in ret]\r\n    frontend_ret = [np.asarray(x) for x in frontend_ret]\r\n\r\n    L, Q = ret\r\n    frontend_Q, frontend_L = frontend_ret\r\n\r\n    assert_all_close(\r\n        ret_np=Q @ np.diag(L) @ Q.T,\r\n        ret_from_gt_np=frontend_Q @ np.diag(frontend_L) @ frontend_Q.T,\r\n        atol=1e-2,\r\n    )
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ivy_tests/test_ivy/test_frontends/test_jax/test_jax_lax_linalg.py b/ivy_tests/test_ivy/test_frontends/test_jax/test_jax_lax_linalg.py
--- a/ivy_tests/test_ivy/test_frontends/test_jax/test_jax_lax_linalg.py	(revision 95944bbd93ce46d12895b0c43b931d66711cc364)
+++ b/ivy_tests/test_ivy/test_frontends/test_jax/test_jax_lax_linalg.py	(date 1683808375489)
@@ -223,7 +223,6 @@
     )
     ret = [ivy.to_numpy(x) for x in ret]
     frontend_ret = [np.asarray(x) for x in frontend_ret]
-
     L, Q = ret
     frontend_Q, frontend_L = frontend_ret
 
Index: .idea/ivy.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"PYTHON_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\">\r\n    <content url=\"file://$MODULE_DIR$\">\r\n      <excludeFolder url=\"file://$MODULE_DIR$/ivy_dev\" />\r\n    </content>\r\n    <orderEntry type=\"jdk\" jdkName=\"Remote Python 3.8.10 Docker (unifyai/ivy:latest)\" jdkType=\"Python SDK\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n  </component>\r\n  <component name=\"PyDocumentationSettings\">\r\n    <option name=\"format\" value=\"NUMPY\" />\r\n    <option name=\"myDocStringFormat\" value=\"NumPy\" />\r\n  </component>\r\n  <component name=\"TestRunnerService\">\r\n    <option name=\"PROJECT_TEST_RUNNER\" value=\"py.test\" />\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/ivy.iml b/.idea/ivy.iml
--- a/.idea/ivy.iml	(revision 95944bbd93ce46d12895b0c43b931d66711cc364)
+++ b/.idea/ivy.iml	(date 1683800366945)
@@ -1,17 +1,7 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<module type="PYTHON_MODULE" version="4">
+<module version="4">
   <component name="NewModuleRootManager">
-    <content url="file://$MODULE_DIR$">
-      <excludeFolder url="file://$MODULE_DIR$/ivy_dev" />
-    </content>
-    <orderEntry type="jdk" jdkName="Remote Python 3.8.10 Docker (unifyai/ivy:latest)" jdkType="Python SDK" />
+    <orderEntry type="inheritedJdk" />
     <orderEntry type="sourceFolder" forTests="false" />
   </component>
-  <component name="PyDocumentationSettings">
-    <option name="format" value="NUMPY" />
-    <option name="myDocStringFormat" value="NumPy" />
-  </component>
-  <component name="TestRunnerService">
-    <option name="PROJECT_TEST_RUNNER" value="py.test" />
-  </component>
 </module>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"JavaScriptSettings\">\r\n    <option name=\"languageLevel\" value=\"ES6\" />\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Remote Python 3.8.10 Docker (unifyai/ivy:latest)\" project-jdk-type=\"Python SDK\" />\r\n  <component name=\"PyPackaging\">\r\n    <option name=\"earlyReleasesAsUpgrades\" value=\"true\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 95944bbd93ce46d12895b0c43b931d66711cc364)
+++ b/.idea/misc.xml	(date 1683800233294)
@@ -1,10 +1,1 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="JavaScriptSettings">
-    <option name="languageLevel" value="ES6" />
-  </component>
-  <component name="ProjectRootManager" version="2" project-jdk-name="Remote Python 3.8.10 Docker (unifyai/ivy:latest)" project-jdk-type="Python SDK" />
-  <component name="PyPackaging">
-    <option name="earlyReleasesAsUpgrades" value="true" />
-  </component>
-</project>
\ No newline at end of file
+
